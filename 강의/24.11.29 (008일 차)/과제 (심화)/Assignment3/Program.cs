/*
이름: 이시온
날짜: 24.11.29

**심화 과제 3. 피보나치 함수 제작**

- 피보나치 수란, 맨 첫째와 둘째 항은 각각 1이지만, 그 뒤로 오는 모든 항은 앞의 두 항의 합인 수열입니다. 예를 들어 [1,1,2,3,5,8,...] 이렇게 4번째(3) 항목은 2번째(1)와 3번째(2)의 합이고, 마찬가지로 6번째(8) 항목은 바로 앞 4번째(3), 5번째(5)의 합인 형태입니다. 함수의 인자값으로 '몇번째' 인지 정수로 건네주면, 일치하는 피보나치 수를 반환하는 함수를 제작하세요. 참고로 11번째 피보나치 수는 89, 20번째 피보나치 수는 6765 입니다.
*/
using System;

namespace Assignment3
{
    internal class Program
    {
        private static void Main(string[] args)
        {
            string passage =
                "**심화 과제 3. 피보나치 함수 제작**\n" +
                "\n" +
                "- 피보나치 수란, 맨 첫째와 둘째 항은 각각 1이지만, 그 뒤로 오는 모든 항은 앞의 두 항의 합인 수열입니다.\n" +
                "예를 들어 [1,1,2,3,5,8,...] 이렇게 4번째(3) 항목은 2번째(1)와 3번째(2)의 합이고, 마찬가지로 6번째(8) 항목은 바로 앞 4번째(3), 5번째(5)의 합인 형태입니다.\n" +
                "함수의 인자값으로 '몇번째' 인지 정수로 건네주면, 일치하는 피보나치 수를 반환하는 함수를 제작하세요.\n" +
                "참고로 11번째 피보나치 수는 89, 20번째 피보나치 수는 6765 입니다.";

            Console.WriteLine();
            Console.Write(passage);
            Console.WriteLine();

            Console.WriteLine();
            Console.Write("정수 입력(): ");
            int.TryParse(Console.ReadLine(), out var n);

            // 94 이상 입력하면 값이 이상하게 나옴.
            // ulong의 최대 크기: 18,446,744,073,709,551,615
            // 93번째 파보니치 수: 12,200,160,415,121,876,738
            // 94번째 파보니치 수: 19,740,274,219,868,223,167
            Console.WriteLine();
            Console.Write($"{n}번째 파보니치 수: {GetFibonacciNumber1(n)}");
            Console.WriteLine();

            ulong[] fibonacciNumber = GetFibonacciNumber2(n);

            Console.WriteLine();
            Console.Write($"{n}번째 피보니치 수: ");
            Console.Write(fibonacciNumber[0]);
            for (int i = 1; i < fibonacciNumber.Length; ++i)
            {
                Console.Write(fibonacciNumber[i].ToString("0000000000000000000"));
            }
            Console.WriteLine();
        }
        
        private static ulong GetFibonacciNumber1(int n)
        {
            ulong current = 0;

            ulong current_old;

            ulong previous = 1;

            for (int i = 0; i < n; ++i)
            {
                current_old = current;

                current += previous;

                previous = current_old;
            }

            return current;
        }
        
        private static ulong[] GetFibonacciNumber2(int n)
        {
            // ulong[n] 메모리 크기: 8byte * n
            // 계산하는 데 필요한 메모리 크기: 8byte * n * 3
            // 최대로 표현 가능한 수: 10의 (19 + n)승 - 1
            // 
            // ulong[int.MaxValue] 메모리 크기: 8byte * int.MaxValue(2,147,483,647) = 17,179,869,176byte(약 17GB)
            // 계산하는 데 필요한 메모리 크기: 17GB * 3 = 약 51GB
            // 최대로 표현 가능한 수: 10의 40,802,189,293승 - 1
            // 
            // 이론상 메모리만 충분하다면 아무리 큰 수라도 출력 가능.

            // 배열의 최대 길이.
            const int length_max = 100000;
            //const int length_max = int.MaxValue;

            // 현재 배열의 길이.
            int length = 1;

            // 1000경
            // ulong에 저장할 수 있는 가장 큰 10의 승수.
            const ulong current_max = 10000000000000000000;

            ulong[]? current = new ulong[length_max];
            ulong[]? current_old = new ulong[length_max];
            ulong[]? previous = new ulong[length_max];

            current[0] = 0;
            previous[0] = 1;

            while (--n >= 0)
            {
                bool overflow = false;

                CopyArray(current_old, current, length);

                for (int i = 0; i < length; ++i)
                {
                    if (overflow == true)
                    {
                        overflow = false;

                        ++previous[i];
                    }

                    if (previous[i] >= current_max - current[i])
                    {
                        overflow = true;

                        current[i] -= current_max;
                    }

                    current[i] += previous[i];
                }

                CopyArray(previous, current_old, length);

                if (overflow)
                {
                    current[length] = 1;
                    previous[length] = 0;

                    if (++length == length_max)
                    {
                        break;
                    }
                }
            }

            current_old = null;
            previous = null;

            // 가비지 컬렉터 강제 호출.
            GC.Collect();
            // 모든 종료자가 실행될 때까지 대기.
            GC.WaitForPendingFinalizers();

            // 배열의 길이 만큼만 반환하기 위한 배열 선언.
            ulong[] result = new ulong[length];

            // 역순으로 저장되어 있는 값들을 정렬해서 넣어줌. 
            for (int i = 0, j = length - 1; i < length; ++i, --j)
            {
                result[i] = current[j];
            }

            current = null;

            // 가비지 컬렉터 강제 호출.
            GC.Collect();
            // 모든 종료자가 실행될 때까지 대기.
            GC.WaitForPendingFinalizers();

            return result;
        }

        private static void CopyArray(ulong[] left, ulong[] right, int length)
        {
            for (int i = 0; i < length; ++i)
            {
                left[i] = right[i];
            }
        }
    }
}

// 100번째 피보나치 수:
// 354224848179261915075

// 1000번째 피보나치 수:
// 4346655768693745643568852767504062580256466051737178040248172908953655541794905189040387984007925516
// 9295922593080322634775209689623239873322471161642996440906533187938298969649928516003704476137795166
// 849228875

// 10000번째 피보나치 수:
// 3364476487643178326662161200510754331030214846068006390656476997468008144216666236815559551363373402
// 5582065332680836159373734790483865268263040892463056431887354544369559827491606602099884183933864652
// 7313000888302692356736131351175792974378544137521305205043477016022647583189065278908551543661595829
// 8727968298751063120057542878345321551510387081829896979161312785626503319548714021428753269818796204
// 6936097879900350962302291026368131493195275630227837628441540360584402572114334961180023091208287046
// 0889239623288354615057765832712525460935911282039252853934346209042452489294039017062338889910858410
// 6518317336043747073790855263176432573399371287193758774689747992630583706574283016163740896917842637
// 8624212835258112820516370298089332099905707920064367426202389783111470054074998459250360633560933883
// 8319233867830561364353518921332797329081337326426526339897639227234078829281779535805709936910491754
// 7080893184105614632233821746563732124822638309210329770164805472624384237486241145309381220656491403
// 2751086643394517512161526545361333111314042436854805106765843493523836959653428071768775328348234345
// 5573667197313927462736291082106792807847180353291311767789246590899386354593278945237776744061922403
// 3763867400402133034329749690202832814593341882681768389307200363479562311710310129195316979460763273
// 7589253530772552375943788434504067715555779056450443016640119462580972216729758615026968443146952034
// 6149322911059706762432685159928347098912847067408620085871350162603120719031720860940812983215810772
// 8207635318662461127824553720853236530577595643007251774431505153960090516860322034916322264088524885
// 2433158051534849622434848299380905070483482449327453732624567755879089187190803662058009594743150052
// 4025327097469953187707243768259074199396322659841474981936092852239450397071654431564213281576889080
// 5878318340491743455627052022356484649519611246026831397097506938264870661326450766507461151267752274
// 8621598642530711298441182622661057163515069260029861704945425047491378115154139941550671256271197133
// 252763631939606902895650288268608362241082050562430701794976171121233066073310059947366875